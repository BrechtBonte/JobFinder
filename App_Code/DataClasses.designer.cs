#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="STUDENT_brecht.bonte@kahosl.be")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCompany(Company instance);
  partial void UpdateCompany(Company instance);
  partial void DeleteCompany(Company instance);
  partial void InsertApplication(Application instance);
  partial void UpdateApplication(Application instance);
  partial void DeleteApplication(Application instance);
  partial void InsertJobOffer(JobOffer instance);
  partial void UpdateJobOffer(JobOffer instance);
  partial void DeleteJobOffer(JobOffer instance);
  partial void InsertOfferHasTag(OfferHasTag instance);
  partial void UpdateOfferHasTag(OfferHasTag instance);
  partial void DeleteOfferHasTag(OfferHasTag instance);
  partial void InsertRegion(Region instance);
  partial void UpdateRegion(Region instance);
  partial void DeleteRegion(Region instance);
  partial void InsertSysParam(SysParam instance);
  partial void UpdateSysParam(SysParam instance);
  partial void DeleteSysParam(SysParam instance);
  partial void InsertTag(Tag instance);
  partial void UpdateTag(Tag instance);
  partial void DeleteTag(Tag instance);
  partial void InsertUserInterestedIn(UserInterestedIn instance);
  partial void UpdateUserInterestedIn(UserInterestedIn instance);
  partial void DeleteUserInterestedIn(UserInterestedIn instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertLogger(Logger instance);
  partial void UpdateLogger(Logger instance);
  partial void DeleteLogger(Logger instance);
  partial void InsertUserSavesOffer(UserSavesOffer instance);
  partial void UpdateUserSavesOffer(UserSavesOffer instance);
  partial void DeleteUserSavesOffer(UserSavesOffer instance);
  partial void InsertMessage(Message instance);
  partial void UpdateMessage(Message instance);
  partial void DeleteMessage(Message instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["STUDENT_brecht_bonte_kahosl_beConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Company> Companies
	{
		get
		{
			return this.GetTable<Company>();
		}
	}
	
	public System.Data.Linq.Table<Application> Applications
	{
		get
		{
			return this.GetTable<Application>();
		}
	}
	
	public System.Data.Linq.Table<JobOffer> JobOffers
	{
		get
		{
			return this.GetTable<JobOffer>();
		}
	}
	
	public System.Data.Linq.Table<OfferHasTag> OfferHasTags
	{
		get
		{
			return this.GetTable<OfferHasTag>();
		}
	}
	
	public System.Data.Linq.Table<Region> Regions
	{
		get
		{
			return this.GetTable<Region>();
		}
	}
	
	public System.Data.Linq.Table<SysParam> SysParams
	{
		get
		{
			return this.GetTable<SysParam>();
		}
	}
	
	public System.Data.Linq.Table<Tag> Tags
	{
		get
		{
			return this.GetTable<Tag>();
		}
	}
	
	public System.Data.Linq.Table<UserInterestedIn> UserInterestedIns
	{
		get
		{
			return this.GetTable<UserInterestedIn>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Logger> Loggers
	{
		get
		{
			return this.GetTable<Logger>();
		}
	}
	
	public System.Data.Linq.Table<UserSavesOffer> UserSavesOffers
	{
		get
		{
			return this.GetTable<UserSavesOffer>();
		}
	}
	
	public System.Data.Linq.Table<Message> Messages
	{
		get
		{
			return this.GetTable<Message>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Description;
	
	private string _Logo;
	
	private string _Website;
	
	private string _Email;
	
	private string _Street;
	
	private string _City;
	
	private int _RegionId;
	
	private EntitySet<JobOffer> _JobOffers;
	
	private EntitySet<Logger> _Loggers;
	
	private EntityRef<Region> _Region;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnRegionIdChanging(int value);
    partial void OnRegionIdChanged();
    #endregion
	
	public Company()
	{
		this._JobOffers = new EntitySet<JobOffer>(new Action<JobOffer>(this.attach_JobOffers), new Action<JobOffer>(this.detach_JobOffers));
		this._Loggers = new EntitySet<Logger>(new Action<Logger>(this.attach_Loggers), new Action<Logger>(this.detach_Loggers));
		this._Region = default(EntityRef<Region>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Logo
	{
		get
		{
			return this._Logo;
		}
		set
		{
			if ((this._Logo != value))
			{
				this.OnLogoChanging(value);
				this.SendPropertyChanging();
				this._Logo = value;
				this.SendPropertyChanged("Logo");
				this.OnLogoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Street
	{
		get
		{
			return this._Street;
		}
		set
		{
			if ((this._Street != value))
			{
				this.OnStreetChanging(value);
				this.SendPropertyChanging();
				this._Street = value;
				this.SendPropertyChanged("Street");
				this.OnStreetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionId", DbType="Int NOT NULL")]
	public int RegionId
	{
		get
		{
			return this._RegionId;
		}
		set
		{
			if ((this._RegionId != value))
			{
				if (this._Region.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRegionIdChanging(value);
				this.SendPropertyChanging();
				this._RegionId = value;
				this.SendPropertyChanged("RegionId");
				this.OnRegionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_JobOffer", Storage="_JobOffers", ThisKey="ID", OtherKey="CompanyId")]
	public EntitySet<JobOffer> JobOffers
	{
		get
		{
			return this._JobOffers;
		}
		set
		{
			this._JobOffers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Logger", Storage="_Loggers", ThisKey="ID", OtherKey="CompanyId")]
	public EntitySet<Logger> Loggers
	{
		get
		{
			return this._Loggers;
		}
		set
		{
			this._Loggers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Company", Storage="_Region", ThisKey="RegionId", OtherKey="ID", IsForeignKey=true)]
	public Region Region
	{
		get
		{
			return this._Region.Entity;
		}
		set
		{
			Region previousValue = this._Region.Entity;
			if (((previousValue != value) 
						|| (this._Region.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Region.Entity = null;
					previousValue.Companies.Remove(this);
				}
				this._Region.Entity = value;
				if ((value != null))
				{
					value.Companies.Add(this);
					this._RegionId = value.ID;
				}
				else
				{
					this._RegionId = default(int);
				}
				this.SendPropertyChanged("Region");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_JobOffers(JobOffer entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_JobOffers(JobOffer entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Loggers(Logger entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Loggers(Logger entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Applications")]
public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _UserId;
	
	private int _OfferId;
	
	private System.DateTime _Applied;
	
	private string _Motivation;
	
	private EntityRef<JobOffer> _JobOffer;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnOfferIdChanging(int value);
    partial void OnOfferIdChanged();
    partial void OnAppliedChanging(System.DateTime value);
    partial void OnAppliedChanged();
    partial void OnMotivationChanging(string value);
    partial void OnMotivationChanged();
    #endregion
	
	public Application()
	{
		this._JobOffer = default(EntityRef<JobOffer>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
	public int UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferId", DbType="Int NOT NULL")]
	public int OfferId
	{
		get
		{
			return this._OfferId;
		}
		set
		{
			if ((this._OfferId != value))
			{
				if (this._JobOffer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOfferIdChanging(value);
				this.SendPropertyChanging();
				this._OfferId = value;
				this.SendPropertyChanged("OfferId");
				this.OnOfferIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Applied", DbType="DateTime NOT NULL")]
	public System.DateTime Applied
	{
		get
		{
			return this._Applied;
		}
		set
		{
			if ((this._Applied != value))
			{
				this.OnAppliedChanging(value);
				this.SendPropertyChanging();
				this._Applied = value;
				this.SendPropertyChanged("Applied");
				this.OnAppliedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Motivation", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Motivation
	{
		get
		{
			return this._Motivation;
		}
		set
		{
			if ((this._Motivation != value))
			{
				this.OnMotivationChanging(value);
				this.SendPropertyChanging();
				this._Motivation = value;
				this.SendPropertyChanged("Motivation");
				this.OnMotivationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOffer_Application", Storage="_JobOffer", ThisKey="OfferId", OtherKey="ID", IsForeignKey=true)]
	public JobOffer JobOffer
	{
		get
		{
			return this._JobOffer.Entity;
		}
		set
		{
			JobOffer previousValue = this._JobOffer.Entity;
			if (((previousValue != value) 
						|| (this._JobOffer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._JobOffer.Entity = null;
					previousValue.Applications.Remove(this);
				}
				this._JobOffer.Entity = value;
				if ((value != null))
				{
					value.Applications.Add(this);
					this._OfferId = value.ID;
				}
				else
				{
					this._OfferId = default(int);
				}
				this.SendPropertyChanged("JobOffer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Application", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Applications.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Applications.Add(this);
					this._UserId = value.ID;
				}
				else
				{
					this._UserId = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobOffers")]
public partial class JobOffer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Title;
	
	private string _Description;
	
	private System.DateTime _Added;
	
	private int _CompanyId;
	
	private System.Nullable<int> _ContactId;
	
	private System.Nullable<int> _AlternateRegionId;
	
	private EntitySet<Application> _Applications;
	
	private EntitySet<OfferHasTag> _OfferHasTags;
	
	private EntitySet<UserSavesOffer> _UserSavesOffers;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Region> _Region;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddedChanging(System.DateTime value);
    partial void OnAddedChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnContactIdChanging(System.Nullable<int> value);
    partial void OnContactIdChanged();
    partial void OnAlternateRegionIdChanging(System.Nullable<int> value);
    partial void OnAlternateRegionIdChanged();
    #endregion
	
	public JobOffer()
	{
		this._Applications = new EntitySet<Application>(new Action<Application>(this.attach_Applications), new Action<Application>(this.detach_Applications));
		this._OfferHasTags = new EntitySet<OfferHasTag>(new Action<OfferHasTag>(this.attach_OfferHasTags), new Action<OfferHasTag>(this.detach_OfferHasTags));
		this._UserSavesOffers = new EntitySet<UserSavesOffer>(new Action<UserSavesOffer>(this.attach_UserSavesOffers), new Action<UserSavesOffer>(this.detach_UserSavesOffers));
		this._Company = default(EntityRef<Company>);
		this._Region = default(EntityRef<Region>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Added", DbType="DateTime NOT NULL")]
	public System.DateTime Added
	{
		get
		{
			return this._Added;
		}
		set
		{
			if ((this._Added != value))
			{
				this.OnAddedChanging(value);
				this.SendPropertyChanging();
				this._Added = value;
				this.SendPropertyChanged("Added");
				this.OnAddedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL")]
	public int CompanyId
	{
		get
		{
			return this._CompanyId;
		}
		set
		{
			if ((this._CompanyId != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIdChanging(value);
				this.SendPropertyChanging();
				this._CompanyId = value;
				this.SendPropertyChanged("CompanyId");
				this.OnCompanyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int")]
	public System.Nullable<int> ContactId
	{
		get
		{
			return this._ContactId;
		}
		set
		{
			if ((this._ContactId != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIdChanging(value);
				this.SendPropertyChanging();
				this._ContactId = value;
				this.SendPropertyChanged("ContactId");
				this.OnContactIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternateRegionId", DbType="Int")]
	public System.Nullable<int> AlternateRegionId
	{
		get
		{
			return this._AlternateRegionId;
		}
		set
		{
			if ((this._AlternateRegionId != value))
			{
				if (this._Region.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAlternateRegionIdChanging(value);
				this.SendPropertyChanging();
				this._AlternateRegionId = value;
				this.SendPropertyChanged("AlternateRegionId");
				this.OnAlternateRegionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOffer_Application", Storage="_Applications", ThisKey="ID", OtherKey="OfferId")]
	public EntitySet<Application> Applications
	{
		get
		{
			return this._Applications;
		}
		set
		{
			this._Applications.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOffer_OfferHasTag", Storage="_OfferHasTags", ThisKey="ID", OtherKey="OfferId")]
	public EntitySet<OfferHasTag> OfferHasTags
	{
		get
		{
			return this._OfferHasTags;
		}
		set
		{
			this._OfferHasTags.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOffer_UserSavesOffer", Storage="_UserSavesOffers", ThisKey="ID", OtherKey="OfferId")]
	public EntitySet<UserSavesOffer> UserSavesOffers
	{
		get
		{
			return this._UserSavesOffers;
		}
		set
		{
			this._UserSavesOffers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_JobOffer", Storage="_Company", ThisKey="CompanyId", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.JobOffers.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.JobOffers.Add(this);
					this._CompanyId = value.ID;
				}
				else
				{
					this._CompanyId = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_JobOffer", Storage="_Region", ThisKey="AlternateRegionId", OtherKey="ID", IsForeignKey=true)]
	public Region Region
	{
		get
		{
			return this._Region.Entity;
		}
		set
		{
			Region previousValue = this._Region.Entity;
			if (((previousValue != value) 
						|| (this._Region.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Region.Entity = null;
					previousValue.JobOffers.Remove(this);
				}
				this._Region.Entity = value;
				if ((value != null))
				{
					value.JobOffers.Add(this);
					this._AlternateRegionId = value.ID;
				}
				else
				{
					this._AlternateRegionId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Region");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobOffer", Storage="_User", ThisKey="ContactId", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.JobOffers.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.JobOffers.Add(this);
					this._ContactId = value.ID;
				}
				else
				{
					this._ContactId = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Applications(Application entity)
	{
		this.SendPropertyChanging();
		entity.JobOffer = this;
	}
	
	private void detach_Applications(Application entity)
	{
		this.SendPropertyChanging();
		entity.JobOffer = null;
	}
	
	private void attach_OfferHasTags(OfferHasTag entity)
	{
		this.SendPropertyChanging();
		entity.JobOffer = this;
	}
	
	private void detach_OfferHasTags(OfferHasTag entity)
	{
		this.SendPropertyChanging();
		entity.JobOffer = null;
	}
	
	private void attach_UserSavesOffers(UserSavesOffer entity)
	{
		this.SendPropertyChanging();
		entity.JobOffer = this;
	}
	
	private void detach_UserSavesOffers(UserSavesOffer entity)
	{
		this.SendPropertyChanging();
		entity.JobOffer = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OfferHasTag")]
public partial class OfferHasTag : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OfferId;
	
	private int _TagId;
	
	private EntityRef<JobOffer> _JobOffer;
	
	private EntityRef<Tag> _Tag;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfferIdChanging(int value);
    partial void OnOfferIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
	
	public OfferHasTag()
	{
		this._JobOffer = default(EntityRef<JobOffer>);
		this._Tag = default(EntityRef<Tag>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int OfferId
	{
		get
		{
			return this._OfferId;
		}
		set
		{
			if ((this._OfferId != value))
			{
				if (this._JobOffer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOfferIdChanging(value);
				this.SendPropertyChanging();
				this._OfferId = value;
				this.SendPropertyChanged("OfferId");
				this.OnOfferIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int TagId
	{
		get
		{
			return this._TagId;
		}
		set
		{
			if ((this._TagId != value))
			{
				if (this._Tag.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTagIdChanging(value);
				this.SendPropertyChanging();
				this._TagId = value;
				this.SendPropertyChanged("TagId");
				this.OnTagIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOffer_OfferHasTag", Storage="_JobOffer", ThisKey="OfferId", OtherKey="ID", IsForeignKey=true)]
	public JobOffer JobOffer
	{
		get
		{
			return this._JobOffer.Entity;
		}
		set
		{
			JobOffer previousValue = this._JobOffer.Entity;
			if (((previousValue != value) 
						|| (this._JobOffer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._JobOffer.Entity = null;
					previousValue.OfferHasTags.Remove(this);
				}
				this._JobOffer.Entity = value;
				if ((value != null))
				{
					value.OfferHasTags.Add(this);
					this._OfferId = value.ID;
				}
				else
				{
					this._OfferId = default(int);
				}
				this.SendPropertyChanged("JobOffer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_OfferHasTag", Storage="_Tag", ThisKey="TagId", OtherKey="ID", IsForeignKey=true)]
	public Tag Tag
	{
		get
		{
			return this._Tag.Entity;
		}
		set
		{
			Tag previousValue = this._Tag.Entity;
			if (((previousValue != value) 
						|| (this._Tag.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Tag.Entity = null;
					previousValue.OfferHasTags.Remove(this);
				}
				this._Tag.Entity = value;
				if ((value != null))
				{
					value.OfferHasTags.Add(this);
					this._TagId = value.ID;
				}
				else
				{
					this._TagId = default(int);
				}
				this.SendPropertyChanged("Tag");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Regions")]
public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<Company> _Companies;
	
	private EntitySet<JobOffer> _JobOffers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Region()
	{
		this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
		this._JobOffers = new EntitySet<JobOffer>(new Action<JobOffer>(this.attach_JobOffers), new Action<JobOffer>(this.detach_JobOffers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Company", Storage="_Companies", ThisKey="ID", OtherKey="RegionId")]
	public EntitySet<Company> Companies
	{
		get
		{
			return this._Companies;
		}
		set
		{
			this._Companies.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_JobOffer", Storage="_JobOffers", ThisKey="ID", OtherKey="AlternateRegionId")]
	public EntitySet<JobOffer> JobOffers
	{
		get
		{
			return this._JobOffers;
		}
		set
		{
			this._JobOffers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Companies(Company entity)
	{
		this.SendPropertyChanging();
		entity.Region = this;
	}
	
	private void detach_Companies(Company entity)
	{
		this.SendPropertyChanging();
		entity.Region = null;
	}
	
	private void attach_JobOffers(JobOffer entity)
	{
		this.SendPropertyChanging();
		entity.Region = this;
	}
	
	private void detach_JobOffers(JobOffer entity)
	{
		this.SendPropertyChanging();
		entity.Region = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysParams")]
public partial class SysParam : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Value;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
	
	public SysParam()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<OfferHasTag> _OfferHasTags;
	
	private EntitySet<UserInterestedIn> _UserInterestedIns;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Tag()
	{
		this._OfferHasTags = new EntitySet<OfferHasTag>(new Action<OfferHasTag>(this.attach_OfferHasTags), new Action<OfferHasTag>(this.detach_OfferHasTags));
		this._UserInterestedIns = new EntitySet<UserInterestedIn>(new Action<UserInterestedIn>(this.attach_UserInterestedIns), new Action<UserInterestedIn>(this.detach_UserInterestedIns));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_OfferHasTag", Storage="_OfferHasTags", ThisKey="ID", OtherKey="TagId")]
	public EntitySet<OfferHasTag> OfferHasTags
	{
		get
		{
			return this._OfferHasTags;
		}
		set
		{
			this._OfferHasTags.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_UserInterestedIn", Storage="_UserInterestedIns", ThisKey="ID", OtherKey="TagId")]
	public EntitySet<UserInterestedIn> UserInterestedIns
	{
		get
		{
			return this._UserInterestedIns;
		}
		set
		{
			this._UserInterestedIns.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OfferHasTags(OfferHasTag entity)
	{
		this.SendPropertyChanging();
		entity.Tag = this;
	}
	
	private void detach_OfferHasTags(OfferHasTag entity)
	{
		this.SendPropertyChanging();
		entity.Tag = null;
	}
	
	private void attach_UserInterestedIns(UserInterestedIn entity)
	{
		this.SendPropertyChanging();
		entity.Tag = this;
	}
	
	private void detach_UserInterestedIns(UserInterestedIn entity)
	{
		this.SendPropertyChanging();
		entity.Tag = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInterestedIn")]
public partial class UserInterestedIn : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserId;
	
	private int _TagId;
	
	private EntityRef<Tag> _Tag;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
	
	public UserInterestedIn()
	{
		this._Tag = default(EntityRef<Tag>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int TagId
	{
		get
		{
			return this._TagId;
		}
		set
		{
			if ((this._TagId != value))
			{
				if (this._Tag.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTagIdChanging(value);
				this.SendPropertyChanging();
				this._TagId = value;
				this.SendPropertyChanged("TagId");
				this.OnTagIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_UserInterestedIn", Storage="_Tag", ThisKey="TagId", OtherKey="ID", IsForeignKey=true)]
	public Tag Tag
	{
		get
		{
			return this._Tag.Entity;
		}
		set
		{
			Tag previousValue = this._Tag.Entity;
			if (((previousValue != value) 
						|| (this._Tag.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Tag.Entity = null;
					previousValue.UserInterestedIns.Remove(this);
				}
				this._Tag.Entity = value;
				if ((value != null))
				{
					value.UserInterestedIns.Add(this);
					this._TagId = value.ID;
				}
				else
				{
					this._TagId = default(int);
				}
				this.SendPropertyChanged("Tag");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserInterestedIn", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserInterestedIns.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserInterestedIns.Add(this);
					this._UserId = value.ID;
				}
				else
				{
					this._UserId = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _ImageName;
	
	private string _Firstname;
	
	private string _Lastname;
	
	private string _Email;
	
	private string _Telephone;
	
	private string _Cv;
	
	private string _Description;
	
	private bool _ShowMail;
	
	private EntitySet<Application> _Applications;
	
	private EntitySet<JobOffer> _JobOffers;
	
	private EntitySet<UserInterestedIn> _UserInterestedIns;
	
	private EntitySet<Logger> _Loggers;
	
	private EntitySet<UserSavesOffer> _UserSavesOffers;
	
	private EntitySet<Message> _Messages;
	
	private EntitySet<Message> _Messages1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageNameChanging(string value);
    partial void OnImageNameChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnCvChanging(string value);
    partial void OnCvChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShowMailChanging(bool value);
    partial void OnShowMailChanged();
    #endregion
	
	public User()
	{
		this._Applications = new EntitySet<Application>(new Action<Application>(this.attach_Applications), new Action<Application>(this.detach_Applications));
		this._JobOffers = new EntitySet<JobOffer>(new Action<JobOffer>(this.attach_JobOffers), new Action<JobOffer>(this.detach_JobOffers));
		this._UserInterestedIns = new EntitySet<UserInterestedIn>(new Action<UserInterestedIn>(this.attach_UserInterestedIns), new Action<UserInterestedIn>(this.detach_UserInterestedIns));
		this._Loggers = new EntitySet<Logger>(new Action<Logger>(this.attach_Loggers), new Action<Logger>(this.detach_Loggers));
		this._UserSavesOffers = new EntitySet<UserSavesOffer>(new Action<UserSavesOffer>(this.attach_UserSavesOffers), new Action<UserSavesOffer>(this.detach_UserSavesOffers));
		this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
		this._Messages1 = new EntitySet<Message>(new Action<Message>(this.attach_Messages1), new Action<Message>(this.detach_Messages1));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string ImageName
	{
		get
		{
			return this._ImageName;
		}
		set
		{
			if ((this._ImageName != value))
			{
				this.OnImageNameChanging(value);
				this.SendPropertyChanging();
				this._ImageName = value;
				this.SendPropertyChanged("ImageName");
				this.OnImageNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Firstname
	{
		get
		{
			return this._Firstname;
		}
		set
		{
			if ((this._Firstname != value))
			{
				this.OnFirstnameChanging(value);
				this.SendPropertyChanging();
				this._Firstname = value;
				this.SendPropertyChanged("Firstname");
				this.OnFirstnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Lastname
	{
		get
		{
			return this._Lastname;
		}
		set
		{
			if ((this._Lastname != value))
			{
				this.OnLastnameChanging(value);
				this.SendPropertyChanging();
				this._Lastname = value;
				this.SendPropertyChanged("Lastname");
				this.OnLastnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Telephone
	{
		get
		{
			return this._Telephone;
		}
		set
		{
			if ((this._Telephone != value))
			{
				this.OnTelephoneChanging(value);
				this.SendPropertyChanging();
				this._Telephone = value;
				this.SendPropertyChanged("Telephone");
				this.OnTelephoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cv", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Cv
	{
		get
		{
			return this._Cv;
		}
		set
		{
			if ((this._Cv != value))
			{
				this.OnCvChanging(value);
				this.SendPropertyChanging();
				this._Cv = value;
				this.SendPropertyChanged("Cv");
				this.OnCvChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowMail", DbType="Bit NOT NULL")]
	public bool ShowMail
	{
		get
		{
			return this._ShowMail;
		}
		set
		{
			if ((this._ShowMail != value))
			{
				this.OnShowMailChanging(value);
				this.SendPropertyChanging();
				this._ShowMail = value;
				this.SendPropertyChanged("ShowMail");
				this.OnShowMailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Application", Storage="_Applications", ThisKey="ID", OtherKey="UserId")]
	public EntitySet<Application> Applications
	{
		get
		{
			return this._Applications;
		}
		set
		{
			this._Applications.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobOffer", Storage="_JobOffers", ThisKey="ID", OtherKey="ContactId")]
	public EntitySet<JobOffer> JobOffers
	{
		get
		{
			return this._JobOffers;
		}
		set
		{
			this._JobOffers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserInterestedIn", Storage="_UserInterestedIns", ThisKey="ID", OtherKey="UserId")]
	public EntitySet<UserInterestedIn> UserInterestedIns
	{
		get
		{
			return this._UserInterestedIns;
		}
		set
		{
			this._UserInterestedIns.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Logger", Storage="_Loggers", ThisKey="ID", OtherKey="UserId")]
	public EntitySet<Logger> Loggers
	{
		get
		{
			return this._Loggers;
		}
		set
		{
			this._Loggers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSavesOffer", Storage="_UserSavesOffers", ThisKey="ID", OtherKey="UserId")]
	public EntitySet<UserSavesOffer> UserSavesOffers
	{
		get
		{
			return this._UserSavesOffers;
		}
		set
		{
			this._UserSavesOffers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_Messages", ThisKey="ID", OtherKey="FromId")]
	public EntitySet<Message> Messages
	{
		get
		{
			return this._Messages;
		}
		set
		{
			this._Messages.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_Messages1", ThisKey="ID", OtherKey="ToId")]
	public EntitySet<Message> Messages1
	{
		get
		{
			return this._Messages1;
		}
		set
		{
			this._Messages1.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Applications(Application entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Applications(Application entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_JobOffers(JobOffer entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_JobOffers(JobOffer entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserInterestedIns(UserInterestedIn entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserInterestedIns(UserInterestedIn entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Loggers(Logger entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Loggers(Logger entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserSavesOffers(UserSavesOffer entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserSavesOffers(UserSavesOffer entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Messages(Message entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Messages(Message entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Messages1(Message entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_Messages1(Message entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Loggers")]
public partial class Logger : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Email;
	
	private string _Password;
	
	private string _Activation;
	
	private System.Nullable<int> _UserId;
	
	private System.Nullable<int> _CompanyId;
	
	private bool _Activated;
	
	private string _Salt;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnActivationChanging(string value);
    partial void OnActivationChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    partial void OnActivatedChanging(bool value);
    partial void OnActivatedChanged();
    partial void OnSaltChanging(string value);
    partial void OnSaltChanged();
    #endregion
	
	public Logger()
	{
		this._Company = default(EntityRef<Company>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activation", DbType="Char(20) NOT NULL", CanBeNull=false)]
	public string Activation
	{
		get
		{
			return this._Activation;
		}
		set
		{
			if ((this._Activation != value))
			{
				this.OnActivationChanging(value);
				this.SendPropertyChanging();
				this._Activation = value;
				this.SendPropertyChanged("Activation");
				this.OnActivationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
	public System.Nullable<int> UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int")]
	public System.Nullable<int> CompanyId
	{
		get
		{
			return this._CompanyId;
		}
		set
		{
			if ((this._CompanyId != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIdChanging(value);
				this.SendPropertyChanging();
				this._CompanyId = value;
				this.SendPropertyChanged("CompanyId");
				this.OnCompanyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activated", DbType="Bit NOT NULL")]
	public bool Activated
	{
		get
		{
			return this._Activated;
		}
		set
		{
			if ((this._Activated != value))
			{
				this.OnActivatedChanging(value);
				this.SendPropertyChanging();
				this._Activated = value;
				this.SendPropertyChanged("Activated");
				this.OnActivatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Salt
	{
		get
		{
			return this._Salt;
		}
		set
		{
			if ((this._Salt != value))
			{
				this.OnSaltChanging(value);
				this.SendPropertyChanging();
				this._Salt = value;
				this.SendPropertyChanged("Salt");
				this.OnSaltChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Logger", Storage="_Company", ThisKey="CompanyId", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Loggers.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Loggers.Add(this);
					this._CompanyId = value.ID;
				}
				else
				{
					this._CompanyId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Logger", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Loggers.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Loggers.Add(this);
					this._UserId = value.ID;
				}
				else
				{
					this._UserId = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSavesOffer")]
public partial class UserSavesOffer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserId;
	
	private int _OfferId;
	
	private System.Nullable<System.DateTime> _Date;
	
	private EntityRef<JobOffer> _JobOffer;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnOfferIdChanging(int value);
    partial void OnOfferIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
	
	public UserSavesOffer()
	{
		this._JobOffer = default(EntityRef<JobOffer>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int OfferId
	{
		get
		{
			return this._OfferId;
		}
		set
		{
			if ((this._OfferId != value))
			{
				if (this._JobOffer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOfferIdChanging(value);
				this.SendPropertyChanging();
				this._OfferId = value;
				this.SendPropertyChanged("OfferId");
				this.OnOfferIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOffer_UserSavesOffer", Storage="_JobOffer", ThisKey="OfferId", OtherKey="ID", IsForeignKey=true)]
	public JobOffer JobOffer
	{
		get
		{
			return this._JobOffer.Entity;
		}
		set
		{
			JobOffer previousValue = this._JobOffer.Entity;
			if (((previousValue != value) 
						|| (this._JobOffer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._JobOffer.Entity = null;
					previousValue.UserSavesOffers.Remove(this);
				}
				this._JobOffer.Entity = value;
				if ((value != null))
				{
					value.UserSavesOffers.Add(this);
					this._OfferId = value.ID;
				}
				else
				{
					this._OfferId = default(int);
				}
				this.SendPropertyChanged("JobOffer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSavesOffer", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserSavesOffers.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserSavesOffers.Add(this);
					this._UserId = value.ID;
				}
				else
				{
					this._UserId = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _FromId;
	
	private int _ToId;
	
	private string _Subject;
	
	private string _Message1;
	
	private bool _FromVisible;
	
	private bool _ToVisible;
	
	private bool _Read;
	
	private System.Nullable<System.DateTime> _Sent;
	
	private EntityRef<User> _User;
	
	private EntityRef<User> _User1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromIdChanging(int value);
    partial void OnFromIdChanged();
    partial void OnToIdChanging(int value);
    partial void OnToIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnMessage1Changing(string value);
    partial void OnMessage1Changed();
    partial void OnFromVisibleChanging(bool value);
    partial void OnFromVisibleChanged();
    partial void OnToVisibleChanging(bool value);
    partial void OnToVisibleChanged();
    partial void OnReadChanging(bool value);
    partial void OnReadChanged();
    partial void OnSentChanging(System.Nullable<System.DateTime> value);
    partial void OnSentChanged();
    #endregion
	
	public Message()
	{
		this._User = default(EntityRef<User>);
		this._User1 = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromId", DbType="Int NOT NULL")]
	public int FromId
	{
		get
		{
			return this._FromId;
		}
		set
		{
			if ((this._FromId != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFromIdChanging(value);
				this.SendPropertyChanging();
				this._FromId = value;
				this.SendPropertyChanged("FromId");
				this.OnFromIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToId", DbType="Int NOT NULL")]
	public int ToId
	{
		get
		{
			return this._ToId;
		}
		set
		{
			if ((this._ToId != value))
			{
				if (this._User1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnToIdChanging(value);
				this.SendPropertyChanging();
				this._ToId = value;
				this.SendPropertyChanged("ToId");
				this.OnToIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnSubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("Subject");
				this.OnSubjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Message", Storage="_Message1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Message1
	{
		get
		{
			return this._Message1;
		}
		set
		{
			if ((this._Message1 != value))
			{
				this.OnMessage1Changing(value);
				this.SendPropertyChanging();
				this._Message1 = value;
				this.SendPropertyChanged("Message1");
				this.OnMessage1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromVisible", DbType="Bit NOT NULL")]
	public bool FromVisible
	{
		get
		{
			return this._FromVisible;
		}
		set
		{
			if ((this._FromVisible != value))
			{
				this.OnFromVisibleChanging(value);
				this.SendPropertyChanging();
				this._FromVisible = value;
				this.SendPropertyChanged("FromVisible");
				this.OnFromVisibleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToVisible", DbType="Bit NOT NULL")]
	public bool ToVisible
	{
		get
		{
			return this._ToVisible;
		}
		set
		{
			if ((this._ToVisible != value))
			{
				this.OnToVisibleChanging(value);
				this.SendPropertyChanging();
				this._ToVisible = value;
				this.SendPropertyChanged("ToVisible");
				this.OnToVisibleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Read]", Storage="_Read", DbType="Bit NOT NULL")]
	public bool Read
	{
		get
		{
			return this._Read;
		}
		set
		{
			if ((this._Read != value))
			{
				this.OnReadChanging(value);
				this.SendPropertyChanging();
				this._Read = value;
				this.SendPropertyChanged("Read");
				this.OnReadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sent", DbType="DateTime")]
	public System.Nullable<System.DateTime> Sent
	{
		get
		{
			return this._Sent;
		}
		set
		{
			if ((this._Sent != value))
			{
				this.OnSentChanging(value);
				this.SendPropertyChanging();
				this._Sent = value;
				this.SendPropertyChanged("Sent");
				this.OnSentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_User", ThisKey="FromId", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Messages.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Messages.Add(this);
					this._FromId = value.ID;
				}
				else
				{
					this._FromId = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_User1", ThisKey="ToId", OtherKey="ID", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.Messages1.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.Messages1.Add(this);
					this._ToId = value.ID;
				}
				else
				{
					this._ToId = default(int);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
